// Code generated by goyacc -o rose.y.go rose.y. DO NOT EDIT.

//line rose.y:2
package parse

import __yyfmt__ "fmt"

//line rose.y:2

import (
	"fmt"
	"strconv"

	"github.com/capnspacehook/rose/ast"
	"github.com/capnspacehook/rose/token"
)

//line rose.y:13
type yySymType struct {
	yys      int
	stmt     ast.Statement
	stmtlist []ast.Statement
	expr     ast.Expression
	exprlist []ast.Expression
	typename *ast.TypeName
	tok      token.Token
}

const IDENT = 57346
const INT = 57347
const FLOAT = 57348
const CHAR = 57349
const STRING = 57350
const RAW_STRING = 57351
const ADD = 57352
const SUB = 57353
const MUL = 57354
const QUO = 57355
const REM = 57356
const EXP = 57357
const AND = 57358
const OR = 57359
const XOR = 57360
const INVT = 57361
const SHL = 57362
const SHR = 57363
const AND_NOT = 57364
const ADD_ASSIGN = 57365
const SUB_ASSIGN = 57366
const MUL_ASSIGN = 57367
const QUO_ASSIGN = 57368
const REM_ASSIGN = 57369
const EXP_ASSIGN = 57370
const AND_ASSIGN = 57371
const OR_ASSIGN = 57372
const XOR_ASSIGN = 57373
const SHL_ASSIGN = 57374
const SHR_ASSIGN = 57375
const AND_NOT_ASSIGN = 57376
const LAND = 57377
const LOR = 57378
const ARROW = 57379
const INC = 57380
const DEC = 57381
const EQL = 57382
const LSS = 57383
const GTR = 57384
const ASSIGN = 57385
const NOT = 57386
const NEQ = 57387
const LEQ = 57388
const GEQ = 57389
const ELLIPSIS = 57390
const LPAREN = 57391
const LBRACK = 57392
const LBRACE = 57393
const COMMA = 57394
const PERIOD = 57395
const RPAREN = 57396
const RBRACK = 57397
const RBRACE = 57398
const SEMICOLON = 57399
const COLON = 57400
const QUES = 57401
const EXCLM = 57402
const CONST = 57403
const LET = 57404
const VAR = 57405

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"INT",
	"FLOAT",
	"CHAR",
	"STRING",
	"RAW_STRING",
	"ADD",
	"SUB",
	"MUL",
	"QUO",
	"REM",
	"EXP",
	"AND",
	"OR",
	"XOR",
	"INVT",
	"SHL",
	"SHR",
	"AND_NOT",
	"ADD_ASSIGN",
	"SUB_ASSIGN",
	"MUL_ASSIGN",
	"QUO_ASSIGN",
	"REM_ASSIGN",
	"EXP_ASSIGN",
	"AND_ASSIGN",
	"OR_ASSIGN",
	"XOR_ASSIGN",
	"SHL_ASSIGN",
	"SHR_ASSIGN",
	"AND_NOT_ASSIGN",
	"LAND",
	"LOR",
	"ARROW",
	"INC",
	"DEC",
	"EQL",
	"LSS",
	"GTR",
	"ASSIGN",
	"NOT",
	"NEQ",
	"LEQ",
	"GEQ",
	"ELLIPSIS",
	"LPAREN",
	"LBRACK",
	"LBRACE",
	"COMMA",
	"PERIOD",
	"RPAREN",
	"RBRACK",
	"RBRACE",
	"SEMICOLON",
	"COLON",
	"QUES",
	"EXCLM",
	"CONST",
	"LET",
	"VAR",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	49, 14,
	-2, 37,
	-1, 75,
	49, 14,
	-2, 37,
}

const yyPrivate = 57344

const yyLast = 210

var yyAct = [...]int{

	13, 14, 28, 29, 30, 31, 32, 20, 21, 33,
	77, 106, 104, 80, 102, 15, 23, 80, 49, 50,
	53, 54, 55, 56, 59, 51, 52, 76, 57, 58,
	60, 36, 35, 74, 24, 34, 80, 1, 85, 17,
	42, 22, 41, 38, 39, 40, 26, 37, 43, 45,
	47, 25, 83, 44, 46, 48, 81, 19, 11, 12,
	10, 18, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 78, 16, 27, 100, 101,
	9, 8, 103, 5, 105, 49, 50, 53, 54, 55,
	56, 59, 51, 52, 7, 57, 58, 60, 6, 4,
	3, 2, 0, 108, 0, 109, 0, 110, 0, 0,
	38, 39, 79, 82, 84, 43, 45, 47, 0, 0,
	44, 46, 48, 0, 0, 0, 0, 0, 0, 107,
	49, 50, 53, 54, 55, 56, 59, 51, 52, 0,
	57, 58, 60, 75, 28, 29, 30, 31, 32, 20,
	21, 0, 0, 0, 0, 38, 39, 0, 23, 0,
	43, 45, 47, 0, 0, 44, 46, 48, 0, 0,
	0, 0, 0, 0, 99, 0, 24, 0, 0, 0,
	0, 0, 0, 22, 0, 0, 0, 0, 26, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 0, 0, 0, 0, 0, 0, 0, 0, 61,
}
var yyPact = [...]int{

	-1000, -1000, -3, -48, -1000, -1000, -1000, -1000, -1000, -1000,
	31, 28, 27, 8, 166, -1000, -1000, 139, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 139, -39, -1000, -1000,
	-1000, -1000, -1000, -1000, 32, 13, 9, 139, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, -1000, -1000, 120, 139, 139, -29,
	-1000, 139, -31, 139, -32, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, -1000,
	75, 8, 139, 8, 139, 8, 139, -1000, 8, 8,
	8,
}
var yyPgo = [...]int{

	0, 101, 100, 99, 98, 94, 83, 81, 80, 77,
	0, 15, 76, 61, 57, 51, 47, 45, 42, 40,
	39, 37,
}
var yyR1 = [...]int{

	0, 21, 1, 1, 2, 2, 3, 3, 4, 4,
	5, 5, 5, 5, 9, 6, 6, 7, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	8, 10, 10, 11, 11, 12, 12, 13, 13, 13,
	14, 15, 15, 15, 15, 15, 16, 16, 16, 16,
	16, 17, 17, 17, 17, 17, 17, 18, 18, 18,
	18, 19, 19, 19, 19, 19, 19, 19, 19, 20,
	20, 20, 20, 20,
}
var yyR2 = [...]int{

	0, 1, 0, 3, 1, 1, 1, 1, 4, 5,
	4, 5, 4, 5, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 3, 1, 2, 1, 1, 1, 1, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -21, -1, -2, -3, -6, -4, -5, -7, -8,
	63, 61, 62, -10, 4, -11, -12, -20, -13, -14,
	10, 11, 44, 19, 37, -15, 49, -9, 5, 6,
	7, 8, 9, 57, 4, 4, 4, -16, 35, 36,
	-17, -18, -19, 40, 45, 41, 46, 42, 47, 10,
	11, 17, 18, 12, 13, 14, 15, 20, 21, 16,
	22, 43, 23, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, -11, 4, -10, 49, 43, -9,
	4, 43, -9, 43, -9, -10, -10, -10, -10, -10,
	-10, -10, -10, -10, -10, -10, -10, -10, -10, 54,
	-10, -10, 43, -10, 43, -10, 43, 54, -10, -10,
	-10,
}
var yyDef = [...]int{

	2, -2, 1, 0, 4, 5, 6, 7, 15, 16,
	0, 0, 0, 17, -2, 31, 33, 0, 35, 36,
	69, 70, 71, 72, 73, 38, 0, 0, 41, 42,
	43, 44, 45, 3, 0, 0, 0, 0, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 34, -2, 0, 0, 0, 0,
	14, 0, 0, 0, 0, 32, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 39,
	0, 8, 0, 10, 0, 12, 0, 40, 9, 11,
	13,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:56
		{
			yylex.(*lexer).Program = &ast.Program{
				Statements: yyDollar[1].stmtlist,
			}
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line rose.y:64
		{
			yyVAL.stmtlist = nil
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:66
		{
			yyVAL.stmtlist = append(yyDollar[1].stmtlist, yyDollar[2].stmt)
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line rose.y:83
		{
			yyVAL.stmt = &ast.VarDeclStatement{
				Token: yyDollar[1].tok,
				Name:  &ast.Identifier{Token: yyDollar[2].tok},
				Value: yyDollar[4].expr,
			}
		}
	case 9:
		yyDollar = yyS[yypt-5 : yypt+1]
//line rose.y:91
		{
			yyVAL.stmt = &ast.VarDeclStatement{
				Token: yyDollar[1].tok,
				Name:  &ast.Identifier{Token: yyDollar[2].tok},
				Type:  yyDollar[3].typename,
				Value: yyDollar[5].expr,
			}
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
//line rose.y:103
		{
			yyVAL.stmt = &ast.ConstDeclStatement{
				Token: yyDollar[1].tok,
				Name:  &ast.Identifier{Token: yyDollar[2].tok},
				Value: yyDollar[4].expr,
			}
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line rose.y:111
		{
			yyVAL.stmt = &ast.ConstDeclStatement{
				Token: yyDollar[1].tok,
				Name:  &ast.Identifier{Token: yyDollar[2].tok},
				Type:  yyDollar[3].typename,
				Value: yyDollar[5].expr,
			}
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
//line rose.y:120
		{
			yyVAL.stmt = &ast.ConstDeclStatement{
				Token: yyDollar[1].tok,
				Name:  &ast.Identifier{Token: yyDollar[2].tok},
				Value: yyDollar[4].expr,
			}
		}
	case 13:
		yyDollar = yyS[yypt-5 : yypt+1]
//line rose.y:128
		{
			yyVAL.stmt = &ast.ConstDeclStatement{
				Token: yyDollar[1].tok,
				Name:  &ast.Identifier{Token: yyDollar[2].tok},
				Type:  yyDollar[3].typename,
				Value: yyDollar[5].expr,
			}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:140
		{
			if _, ok := typeNames[yyDollar[1].tok.Literal]; ok {
				yyVAL.typename = &ast.TypeName{
					Token: yyDollar[1].tok,
				}
			} else {
				yylex.Error(fmt.Sprintf("%q is not a valid type", yyDollar[1].tok.Literal))
			}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:158
		{
			yyVAL.stmt = &ast.ExprStatement{
				Expr: yyDollar[1].expr,
			}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:166
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:174
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:182
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:190
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:198
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:206
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:214
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:222
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:230
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:238
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:246
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:254
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:262
		{
			yyVAL.stmt = &ast.AssignmentStatement{
				Token: yyDollar[2].tok,
				Name:  &ast.Identifier{Token: yyDollar[1].tok},
				Value: yyDollar[3].expr,
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:274
		{
			yyVAL.expr = &ast.BinaryExpression{
				Lhs:   yyDollar[1].expr,
				Token: yyDollar[2].tok,
				Rhs:   yyDollar[3].expr,
			}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line rose.y:286
		{
			yyVAL.expr = &ast.UnaryExpression{
				Token: yyDollar[1].tok,
				Value: yyDollar[2].expr,
			}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:301
		{
			if v, ok := boolConsts[yyDollar[1].tok.Literal]; ok {
				yyVAL.expr = &ast.BooleanLiteral{
					Token: yyDollar[1].tok,
					Value: v,
				}
			} else if yyDollar[1].tok.Literal == "nil" {
				yyVAL.expr = &ast.NilLiteral{
					Token: yyDollar[1].tok,
				}
			} else {
				yyVAL.expr = &ast.Identifier{
					Token: yyDollar[1].tok,
				}
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line rose.y:319
		{
			yyVAL.expr = &ast.ParenExpression{
				Lparen: yyDollar[1].tok,
				Expr:   yyDollar[2].expr,
				Rparen: yyDollar[3].tok,
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line rose.y:330
		{
			yyVAL.expr = &ast.Conversion{
				Type:  yyDollar[1].typename,
				Value: yyDollar[3].expr,
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:340
		{
			i, err := strconv.ParseInt(yyDollar[1].tok.Literal, 0, 64)
			if err != nil {
				yylex.(*lexer).Error(err.Error())
			}

			yyVAL.expr = &ast.IntegerLiteral{
				Token: yyDollar[1].tok,
				Value: i,
			}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:352
		{
			f, err := strconv.ParseFloat(yyDollar[1].tok.Literal, 64)
			if err != nil {
				yylex.(*lexer).Error(err.Error())
			}

			yyVAL.expr = &ast.FloatLiteral{
				Token: yyDollar[1].tok,
				Value: f,
			}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:364
		{
			if n := len(yyDollar[1].tok.Literal); n >= 2 {
				c, _, _, err := strconv.UnquoteChar(yyDollar[1].tok.Literal[1:n-1], '\'')
				if err != nil {
					yylex.(*lexer).Error(err.Error())
				} else {
					yyVAL.expr = &ast.CharLiteral{
						Token: yyDollar[1].tok,
						Value: c,
					}
				}
			}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:378
		{
			yyVAL.expr = &ast.StringLiteral{
				Token: yyDollar[1].tok,
			}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line rose.y:384
		{
			yyVAL.expr = &ast.RawStringLiteral{
				Token: yyDollar[1].tok,
			}
		}
	}
	goto yystack /* stack new state and value */
}
